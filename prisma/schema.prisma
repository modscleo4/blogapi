// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @db.Uuid
  username        String    @unique @db.VarChar(255)
  email           String    @unique @db.VarChar(255)
  name            String    @db.VarChar(255)
  bio             String?   @db.Text
  password        String?   @db.VarChar(255)
  emailVerifiedAt DateTime? @map("email_verified_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")

  audits       Audit[]
  posts        Post[]
  replies      Reply[]
  accessTokens AccessToken[]
  postVotes    PostVote[]
  replyVotes   ReplyVote[]

  @@map("users")
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
}

enum AuditEntity {
  USER
  POST
  REPLY
  POST_VOTE
  REPLY_VOTE
}

model Audit {
  id        String      @id @db.Uuid
  userId    String      @map("user_id") @db.Uuid
  action    AuditAction
  entity    AuditEntity
  data      Json        @db.Json
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime?   @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("audits")
}

model Post {
  id        String    @id @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  title     String    @db.VarChar(255)
  resume    String    @db.VarChar(255)
  content   Json      @db.Json
  imageUrl  String?   @map("image_url") @db.VarChar(255)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  user    User        @relation(fields: [userId], references: [id])
  votes   PostVote[]
  replies Reply[]
  points  PostPoints?

  @@map("posts")
}

model Reply {
  id        String    @id @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  postId    String    @map("post_id") @db.Uuid
  replyId   String?   @map("reply_id") @db.Uuid
  content   Json      @db.Json
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  user    User         @relation(fields: [userId], references: [id])
  post    Post         @relation(fields: [postId], references: [id])
  parent  Reply?       @relation("ReplyToReply", fields: [replyId], references: [id])
  replies Reply[]      @relation("ReplyToReply")
  votes   ReplyVote[]
  points  ReplyPoints?

  @@map("replies")
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model PostVote {
  id        String    @id @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  postId    String    @map("post_id") @db.Uuid
  kind      VoteType
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@map("post_votes")
}

model ReplyVote {
  id        String    @id @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  replyId   String    @map("reply_id") @db.Uuid
  kind      VoteType
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id])
  reply Reply @relation(fields: [replyId], references: [id])

  @@map("reply_votes")
}

view PostPoints {
  postId String @unique @map("post_id") @db.Uuid
  value  BigInt

  post Post @relation(fields: [postId], references: [id])

  @@map("post_points")
}

view ReplyPoints {
  replyId String @unique @map("reply_id") @db.Uuid
  value   BigInt

  reply Reply @relation(fields: [replyId], references: [id])

  @@map("reply_points")
}

model AccessToken {
  id        String    @id @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  scope     String    @db.VarChar(255)
  userIP    String?   @map("user_ip") @db.VarChar(255)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  expiresAt DateTime  @map("expires_at")
  revokedAt DateTime? @map("revoked_at")

  user User @relation(fields: [userId], references: [id])

  @@map("access_tokens")
}
